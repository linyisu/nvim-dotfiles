local ls = require("luasnip") -- 引入 LuaSnip

-- 定义一些快捷函数
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local d = ls.dynamic_node
local sn = ls.snippet_node
-- 定义 C++ 代码片段
ls.add_snippets("cpp", {
    s("acm", {
        t({ "#include <bits/stdc++.h>",
            "using i64 = long long;",
            "using namespace std;" ,
            "",
            "int main() {",
            "\tios::sync_with_stdio(false); cin.tie(nullptr);",
            "",
            "\t" }), i(1), -- 插入点 1
        t({ "", "",
            "\treturn 0;",
            "",
            "}" }),
    }),
    s("acms", {
        t({ "#include <bits/stdc++.h>",
            "using i64 = long long;",
            "using namespace std;" ,
            "" }),
        t({ "", "void solve() {" }),
        t({ "", "\t" }), i(1, ""),
        t({ "", "}", "" }),
        t({ "", "int main() {",
            "\tios::sync_with_stdio(false); cin.tie(nullptr);" }),
        t({ "", "\tint t; cin >> t;" }),
        t({ "", "\twhile (t--) { solve(); }" }),
        t({ "", "\treturn 0;", }),
        t({ "", "}" }),
    }),
    s("DSU", {
        t({ "struct DSU {",
            "\tstd::vector<int> f, siz;",
            "\t",
            "\tDSU() {}",
            "\tDSU(int n) {",
            "\t\tinit(n);",
            "\t}",
            "\tvoid init(int n) {",
            "\t\tf.resize(n);",
            "\t\tstd::iota(f.begin(), f.end(), 0);",
            "\t\tsiz.assign(n, 1);",
            "\t}",
            "\tint find(int x) {",
            "\t\twhile (x != f[x]) {",
            "\t\t\tx = f[x] = f[f[x]];",
            "\t\t}",
            "\t\treturn x;",
            "\t}",
            "\tbool same(int x, int y) {",
            "\t\treturn find(x) == find(y);",
            "\t}",
            "\tbool merge(int x, int y) {",
            "\t\tx = find(x);",
            "\t\ty = find(y);",
            "\t\tif (x == y) {",
            "\t\t\treturn false;",
            "\t\t}",
            "\t\tsiz[x] += siz[y];",
            "\t\tf[y] = x;",
            "\t\treturn true;",
            "\t}",
            "\tint size(int x) {",
            "\t\treturn siz[find(x)];",
            "\t}",
            "};", })
    }),
    s("dijkstra", {
        t({ "vector<i64> Dijkstra(int n, int start, vector<vector<pair<int, i64>>> & adj) {",
            "\tvector<i64> dis(n, -1);",
            "\tpriority_queue<pair<i64, int>, vector<pair<i64, int>>, greater<>> q;",
            "\tq.emplace(0, start);",
            "\twhile (q.size()) {",
            "\t\tauto [d, x] = q.top(); q.pop();",
            "\t\tif (dis[x] != -1) continue;",
            "\t\tdis[x] = d;",
            "\t\tfor (auto [y, w] : adj[x]) {",
            "\t\t\tq.emplace(w + d, y);",
            "\t\t}",
            "\t}",
            "\treturn dis;",
            "}" })
    }),
    s("spfa", {
        t({
            "bool spfa(int n, vector<vector<pair<int, i64>>> & adj) {",
            "\tvector<int> dis(n, inf);",
            "\tvector<bool> in_queue(n);",
            "\tvector<int> cnt(n);",
            "\tqueue<int> q;",
            "\tq.push(0);",
            "\tdis[0] = 0;",
            "\tin_queue[0] = true;",
            "\twhile (q.size()) {",
            "\t\tint from = q.front(); q.pop();",
            "\t\tin_queue[from] = false;",
            "\t\tfor (auto [to, w] : adj[from]) {",
            "\t\t\tif (dis[to] > dis[from] + w) {",
            "\t\t\t\tdis[to] = dis[from] + w;",
            "\t\t\t\tif (!in_queue[to]) {",
            "\t\t\t\t\tq.push(to);",
            "\t\t\t\t\tin_queue[to] = true;",
            "\t\t\t\t\tcnt[to] ++;",
            "\t\t\t\t\tif (cnt[to] == n) return true;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\treturn false;",
            "};"
        })
    }),
    s("LazySegmentTree", {
        t({
            "template<class Info, class Tag>",
            "struct LazySegmentTree {",
            "    int n;",
            "    vector<Info> info;",
            "    vector<Tag> tag;",
            "    LazySegmentTree() : n(0) {}",
            "    LazySegmentTree(int n_, Info v_ = Info()) {",
            "        init(n_, v_);",
            "    }",
            "    void init(int n_, Info v_ = Info()) {",
            "        init(vector(n_, v_));",
            "    }",
            "    template<class T>",
            "    LazySegmentTree(vector<T> init_) {",
            "        init(init_);",
            "    }",
            "    template<class T>",
            "    void init(vector<T> init_) {",
            "        n = init_.size();",
            "        info.assign(4 << __lg(n), Info());",
            "        tag.assign(4 << __lg(n), Tag());",
            "        function<void(int, int, int)> build = [&](int p, int l, int r) {",
            "            if (r - l == 1) {",
            "                info[p] = init_[l];",
            "                return;",
            "            }",
            "            int m = (l + r) >> 1;",
            "            build(p << 1, l, m);",
            "            build(p << 1 | 1, m, r);",
            "            pull(p);",
            "        };",
            "        build(1, 0, n);",
            "    }",
            "    void pull(int p) {",
            "        info[p] = info[p << 1] + info[p << 1 | 1];",
            "    }",
            "    void apply(int p, const Tag & v) {",
            "        info[p].apply(v);",
            "        tag[p].apply(v);",
            "    }",
            "    void push(int p) {",
            "        apply(p << 1, tag[p]);",
            "        apply(p << 1 | 1, tag[p]);",
            "        tag[p] = Tag();",
            "    }",
            "    Info rangeQuery(int p, int l, int r, int x, int y) {",
            "        if (l >= y || r <= x) {",
            "            return Info();",
            "        }",
            "        if (l >= x && r <= y) {",
            "            return info[p];",
            "        }",
            "        int m  = (l + r) >> 1;",
            "        push(p);",
            "        return rangeQuery(p << 1, l, m, x, y) + rangeQuery(p << 1 | 1, m, r, x, y);",
            "    }",
            "    Info rangeQuery(int l, int r) {",
            "        return rangeQuery(1, 0, n, l, r);",
            "    }",
            "    void rangeApply(int p, int l, int r, int x, int y, const Tag & v) {",
            "        if (l >= y || r <= x) {",
            "            return;",
            "        }",
            "        if (x <= l && r <= y) {",
            "            apply(p, v);",
            "            return;",
            "        }",
            "        int m = (l + r) >> 1;",
            "        push(p);",
            "        rangeApply(p << 1, l, m, x, y, v);",
            "        rangeApply(p << 1 | 1, m, r, x, y, v);",
            "        pull(p);",
            "    }",
            "    void rangeApply(int l, int r, const Tag & v) {",
            "        rangeApply(1, 0, n, l, r, v);",
            "    }",
            "};",
            "struct Tag {",
            "    int add = 0;",
            "    void apply(const Tag & t) & {",
            "        add += t.add;",
            "    }",
            "};",
            "struct Info {",
            "    i64 sum = 0;",
            "    int len = 1;",
            "    Info () {}",
            "    Info (i64 sum_, int len_ = 1) : sum(sum_), len(len_) {}",
            "    void apply(const Tag & t) & {",
            "        sum += t.add * len;",
            "    }",
            "};",
            "Info operator + (const Info & a, const Info & b) {",
            "    return {a.sum + b.sum, a.len + b.len};",
            "}"
        })
    }),
})
